# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _ext2
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _ext2.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _ext2.PySwigIterator_value(*args)
    def incr(*args): return _ext2.PySwigIterator_incr(*args)
    def decr(*args): return _ext2.PySwigIterator_decr(*args)
    def distance(*args): return _ext2.PySwigIterator_distance(*args)
    def equal(*args): return _ext2.PySwigIterator_equal(*args)
    def copy(*args): return _ext2.PySwigIterator_copy(*args)
    def next(*args): return _ext2.PySwigIterator_next(*args)
    def previous(*args): return _ext2.PySwigIterator_previous(*args)
    def advance(*args): return _ext2.PySwigIterator_advance(*args)
    def __eq__(*args): return _ext2.PySwigIterator___eq__(*args)
    def __ne__(*args): return _ext2.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _ext2.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _ext2.PySwigIterator___isub__(*args)
    def __add__(*args): return _ext2.PySwigIterator___add__(*args)
    def __sub__(*args): return _ext2.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _ext2.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class inodevector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, inodevector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, inodevector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _ext2.inodevector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _ext2.inodevector___nonzero__(*args)
    def __len__(*args): return _ext2.inodevector___len__(*args)
    def pop(*args): return _ext2.inodevector_pop(*args)
    def __getslice__(*args): return _ext2.inodevector___getslice__(*args)
    def __setslice__(*args): return _ext2.inodevector___setslice__(*args)
    def __delslice__(*args): return _ext2.inodevector___delslice__(*args)
    def __delitem__(*args): return _ext2.inodevector___delitem__(*args)
    def __getitem__(*args): return _ext2.inodevector___getitem__(*args)
    def __setitem__(*args): return _ext2.inodevector___setitem__(*args)
    def append(*args): return _ext2.inodevector_append(*args)
    def empty(*args): return _ext2.inodevector_empty(*args)
    def size(*args): return _ext2.inodevector_size(*args)
    def clear(*args): return _ext2.inodevector_clear(*args)
    def swap(*args): return _ext2.inodevector_swap(*args)
    def get_allocator(*args): return _ext2.inodevector_get_allocator(*args)
    def begin(*args): return _ext2.inodevector_begin(*args)
    def end(*args): return _ext2.inodevector_end(*args)
    def rbegin(*args): return _ext2.inodevector_rbegin(*args)
    def rend(*args): return _ext2.inodevector_rend(*args)
    def pop_back(*args): return _ext2.inodevector_pop_back(*args)
    def erase(*args): return _ext2.inodevector_erase(*args)
    def __init__(self, *args): 
        this = _ext2.new_inodevector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _ext2.inodevector_push_back(*args)
    def front(*args): return _ext2.inodevector_front(*args)
    def back(*args): return _ext2.inodevector_back(*args)
    def assign(*args): return _ext2.inodevector_assign(*args)
    def resize(*args): return _ext2.inodevector_resize(*args)
    def insert(*args): return _ext2.inodevector_insert(*args)
    def reserve(*args): return _ext2.inodevector_reserve(*args)
    def capacity(*args): return _ext2.inodevector_capacity(*args)
    __swig_destroy__ = _ext2.delete_inodevector
    __del__ = lambda self : None;
inodevector_swigregister = _ext2.inodevector_swigregister
inodevector_swigregister(inodevector)

class direntryvector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, direntryvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, direntryvector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _ext2.direntryvector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _ext2.direntryvector___nonzero__(*args)
    def __len__(*args): return _ext2.direntryvector___len__(*args)
    def pop(*args): return _ext2.direntryvector_pop(*args)
    def __getslice__(*args): return _ext2.direntryvector___getslice__(*args)
    def __setslice__(*args): return _ext2.direntryvector___setslice__(*args)
    def __delslice__(*args): return _ext2.direntryvector___delslice__(*args)
    def __delitem__(*args): return _ext2.direntryvector___delitem__(*args)
    def __getitem__(*args): return _ext2.direntryvector___getitem__(*args)
    def __setitem__(*args): return _ext2.direntryvector___setitem__(*args)
    def append(*args): return _ext2.direntryvector_append(*args)
    def empty(*args): return _ext2.direntryvector_empty(*args)
    def size(*args): return _ext2.direntryvector_size(*args)
    def clear(*args): return _ext2.direntryvector_clear(*args)
    def swap(*args): return _ext2.direntryvector_swap(*args)
    def get_allocator(*args): return _ext2.direntryvector_get_allocator(*args)
    def begin(*args): return _ext2.direntryvector_begin(*args)
    def end(*args): return _ext2.direntryvector_end(*args)
    def rbegin(*args): return _ext2.direntryvector_rbegin(*args)
    def rend(*args): return _ext2.direntryvector_rend(*args)
    def pop_back(*args): return _ext2.direntryvector_pop_back(*args)
    def erase(*args): return _ext2.direntryvector_erase(*args)
    def __init__(self, *args): 
        this = _ext2.new_direntryvector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _ext2.direntryvector_push_back(*args)
    def front(*args): return _ext2.direntryvector_front(*args)
    def back(*args): return _ext2.direntryvector_back(*args)
    def assign(*args): return _ext2.direntryvector_assign(*args)
    def resize(*args): return _ext2.direntryvector_resize(*args)
    def insert(*args): return _ext2.direntryvector_insert(*args)
    def reserve(*args): return _ext2.direntryvector_reserve(*args)
    def capacity(*args): return _ext2.direntryvector_capacity(*args)
    __swig_destroy__ = _ext2.delete_direntryvector
    __del__ = lambda self : None;
direntryvector_swigregister = _ext2.direntryvector_swigregister
direntryvector_swigregister(direntryvector)

class uintvector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uintvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uintvector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _ext2.uintvector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _ext2.uintvector___nonzero__(*args)
    def __len__(*args): return _ext2.uintvector___len__(*args)
    def pop(*args): return _ext2.uintvector_pop(*args)
    def __getslice__(*args): return _ext2.uintvector___getslice__(*args)
    def __setslice__(*args): return _ext2.uintvector___setslice__(*args)
    def __delslice__(*args): return _ext2.uintvector___delslice__(*args)
    def __delitem__(*args): return _ext2.uintvector___delitem__(*args)
    def __getitem__(*args): return _ext2.uintvector___getitem__(*args)
    def __setitem__(*args): return _ext2.uintvector___setitem__(*args)
    def append(*args): return _ext2.uintvector_append(*args)
    def empty(*args): return _ext2.uintvector_empty(*args)
    def size(*args): return _ext2.uintvector_size(*args)
    def clear(*args): return _ext2.uintvector_clear(*args)
    def swap(*args): return _ext2.uintvector_swap(*args)
    def get_allocator(*args): return _ext2.uintvector_get_allocator(*args)
    def begin(*args): return _ext2.uintvector_begin(*args)
    def end(*args): return _ext2.uintvector_end(*args)
    def rbegin(*args): return _ext2.uintvector_rbegin(*args)
    def rend(*args): return _ext2.uintvector_rend(*args)
    def pop_back(*args): return _ext2.uintvector_pop_back(*args)
    def erase(*args): return _ext2.uintvector_erase(*args)
    def __init__(self, *args): 
        this = _ext2.new_uintvector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _ext2.uintvector_push_back(*args)
    def front(*args): return _ext2.uintvector_front(*args)
    def back(*args): return _ext2.uintvector_back(*args)
    def assign(*args): return _ext2.uintvector_assign(*args)
    def resize(*args): return _ext2.uintvector_resize(*args)
    def insert(*args): return _ext2.uintvector_insert(*args)
    def reserve(*args): return _ext2.uintvector_reserve(*args)
    def capacity(*args): return _ext2.uintvector_capacity(*args)
    __swig_destroy__ = _ext2.delete_uintvector
    __del__ = lambda self : None;
uintvector_swigregister = _ext2.uintvector_swigregister
uintvector_swigregister(uintvector)

class Ext2Error:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ext2Error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ext2Error, name)
    __repr__ = _swig_repr
    def msg(*args): return _ext2.Ext2Error_msg(*args)
    def code(*args): return _ext2.Ext2Error_code(*args)
    def str(*args): return _ext2.Ext2Error_str(*args)
    def __init__(self, *args): 
        this = _ext2.new_Ext2Error(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ext2.delete_Ext2Error
    __del__ = lambda self : None;
Ext2Error_swigregister = _ext2.Ext2Error_swigregister
Ext2Error_swigregister(Ext2Error)

class DirEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DirEntry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ext2.new_DirEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(*args): return _ext2.DirEntry_name(*args)
    def inode(*args): return _ext2.DirEntry_inode(*args)
    __swig_destroy__ = _ext2.delete_DirEntry
    __del__ = lambda self : None;
DirEntry_swigregister = _ext2.DirEntry_swigregister
DirEntry_swigregister(DirEntry)

class Inode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Inode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Inode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ext2.new_Inode(*args)
        try: self.this.append(this)
        except: self.this = this
    def blocks(*args): return _ext2.Inode_blocks(*args)
    def dirEntries(*args): return _ext2.Inode_dirEntries(*args)
    def links(*args): return _ext2.Inode_links(*args)
    def is_sock(*args): return _ext2.Inode_is_sock(*args)
    def is_lnk(*args): return _ext2.Inode_is_lnk(*args)
    def is_reg(*args): return _ext2.Inode_is_reg(*args)
    def is_blk(*args): return _ext2.Inode_is_blk(*args)
    def is_dir(*args): return _ext2.Inode_is_dir(*args)
    def is_chr(*args): return _ext2.Inode_is_chr(*args)
    def is_fifo(*args): return _ext2.Inode_is_fifo(*args)
    __swig_destroy__ = _ext2.delete_Inode
    __del__ = lambda self : None;
Inode_swigregister = _ext2.Inode_swigregister
Inode_swigregister(Inode)

class Fs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fs, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ext2.new_Fs(*args)
        try: self.this.append(this)
        except: self.this = this
    def scanning(*args): return _ext2.Fs_scanning(*args)
    def inodes(*args): return _ext2.Fs_inodes(*args)
    __swig_destroy__ = _ext2.delete_Fs
    __del__ = lambda self : None;
Fs_swigregister = _ext2.Fs_swigregister
Fs_swigregister(Fs)



